ChakraCore is Microsoft's open-source (MIT License) Javascript engine.
It's incorporated into PinballY as a scripting engine for user
customizations.

Embedding ChakraCore into a third-party C++/Win32 application is
straightforward.  You just need the DLL, the import .lib for the DLL,
and a few header files.  The ChakraCore developers even provide a
NuGet package (Microsoft.ChakraCore.vc140) with this set of files, so
in principle the dependencies could be automated via NuGet.  But it's
easy enough to just build ChakraCore from source using Visual Studio,
so I'm just building it manually and copying the required files into
the PinballY project folder.  

The PinballY git repository includes all of the built ChakraCore files
required, so you should be able to build with just what's in the git.
However, you might need to rebuild the included ChakraCore binaries if
(a) you want to update to a newer ChakraCore release, or (b) your
version of Visual C++ can't read my .lib binaries.  It's fortunately
really easy to do this:

1. git clone https://github.com/Microsoft/ChakraCore.git

2. git checkout v1.11.3 [you can substitute the current release version]

3. Open <Path to ChakraCore>/build/Chakra.Core.sln in Visual Studio

4. Build the x86 and x64 versions

   a. Select configuration Release/x64
   b. Build -> Rebuild Solution
   c. Select configuration Release/x86
   d. Build -> Rebuild Solution

5. git clone https://github.com/mjrgh/ChakraCore-Debugger

   (That's the fork with my changes.  I've fixed a number of problems
   in the original and added some new functionality.  If you want to
   use the official version instead, well, I'd recommend against it,
   but if you really want to anyway, see "Extra steps..." below.)

6. Open ChakraCore-Debugger/ChakraCore.Debugger.sln in Visual Studio

7. Make sure all three "lib" sub-projects are still selected.  Now, FOR EACH
   configuration in Debug/x86, Debug/x64, Release/x86, Release/x64:

   a. Select the current configuration in the toolbar
   b. Right-click the selected "lib" sub-projects, select Rebuild Selection

8. In a CMD prompt, CD to the PinballY folder and run 
   import-chakra-core.bat "<path to ChakraCore>" "<path to ChakraCore-Debugger>"

This will copy the required dependency files from the ChakraCore
source tree into the PinballY source tree, where they'll be part of
the PinballY git repository.  

This arrangement is good because it means that you don't have to
install the ChakraCore source tree just to build PinballY.  All
dependent files are captured in the PinballY git repos.  The only
drawback is that any time we want to update to a newer release of
ChakraCore, you have to repeat the manual procedure above.  And even
that isn't so terrible, as the build process for ChakraCore is really
simple, as you can see from the steps above.


======================================================================

Extra steps needed for the official ChakraCore-Debugger fork

Ignore the following if you're using my forked ChakraCore-Debugger
version, which is what I strongly recommend.

If you really want to use the original, it's possible, but you'll have
to do significant work, and the resulting build will have some
annoying problems when using it with VS Code.

1. The easy part.  Change the project settings to link with the static
C runtime libs; the default link with the DLL crtls, which is
incompatible with PinballY's build settings and thus won't allow the
libs to be linked.  Under the "lib" folder, select all three
sub-projects by shift-clicking, then:

   a. Right-click the selected group, select Properties
   b. Navigate to C/C++ > Code Generation
   c. Select Release > All Platforms in the configuration/platform drop list
   d. In the right pane, set "Runtime Library" to "Multi-threaded (/MT)"
   e. Select Debug > All Platforms in the configuration/platform drop list
   f. In the right pane, set "Runtime Library" to "Multi-threaded Debug (/MTd)"
   g. Click Apply, OK

2. Not too hard, but a bit of work.  Compile PinballY.  Review the
link errors.  Remove calls to JsDebug... functions that cause "missing
external reference" errors in the link.  These are new custom API
functions that I added to the ChakraCore-Debugger public API.  They
don't exist in the original, so the PinballY dependencies on them
will cause link errors.

3. The hard part.  Replicate all of the development work I did to fix
bugs and add missing functionality to the ChakraCore-Debugger project.
You'll have to thoroughly test to find the issues, and come up with
your own alternative solutions.  Or you can just live with the
problems if you prefer.

Some of the known issues:

a. Breakpoints on non-executable lines aren't resolved correctly in VS
Code.  Fire up VS Code; launch a PinballY session; stop in the
debugger.  Set a breakpoint on a line of source that doesn't have any
executable code.  The Javascript engine will properly set the BP on
the next exectuable line.  Now click *again* on the same line to set
another breakpoint there.  VS Code will think it has two breakpoints
on top of each other at this point; clearing either one will crash the
debug session.

b. The "break=none" startup mode won't work.  The CC-D layer doesn't
have a way to let PinballY resume execution after the initial break.
