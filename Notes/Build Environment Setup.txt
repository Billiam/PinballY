Build Environment Setup

1. Visual Studio 2017

I'm building using Visual Studio 2017.  As of this writing, I'm on
15.6.1, but other nearby or later versions should work.  (Updating to
a newer major version might require some edits to the C++ code, as
Microsoft always updates to the latest C++ language standard on major
versions, and the C++ language specs haven't been shy about making
code-breaking changes lately.)


2. DirectX SDK June 2010

You also have to separately the legacy "DirectX Software Development
Kit (June 2010)", which you can currently find here:

  https://www.microsoft.com/en-us/download/details.aspx?id=6812

After installing the June 2010 DX SDK, you MUST set the following
global environment variable to its install directory:

  set DXSDK_DIR=C:\DXSDK\

The variable MUST include the trailing backslash.  To set this:

  - Go to the System Properties (aka Advanced System Settings) control panel
  - click Environment Variables
  - In the top half of the dialog ("User variables for <user>"), click New
  - Enter DXSDK_DIR as the new variable name, and enter the path with 
    trailing backslash

Why do you have to install the old SDK?  If you're familiar with the
modern DirectX technologies, you're aware that there's no longer a
separate DirectX SDK; all DirectX features are now part of the main
Windows SDK.  Unfortunately, this integration comes at a cost: Windows
7 is no longer fully supported in the modern DirectX technologies.  I
want to support Windows 7 for now, though, which means that we can't
use all of the latest DX technologies.  In particular, we can't use
the current audio API, XAudio2.9, since it only works on Windows 10.
We can't even use the previous version, XAudio2.8, since that only
works on Windows 8 and later.  We have to go back to XAudio2.7 for
Windows 7 support.  And XAudio2.7 isn't supported at all in the
current Windows SDK.  To compile for XAudio2.7, we have to use that
creaky old June 2010 SDK, which has to be installed separately.

XAudio2.7 is the only legacy technology we depend upon, so as soon as
we're ready to abandon Windows 7 users, we can get rid of the old
DXSDK and go entirely with the modern Windows SDK.


3.  WiX Toolset

To build the MSI installer, you'll also need to install the free WiX
Toolset, version 3.11.  You can find that here:

  http://wixtoolset.org/

Install both of the following:

  - WiX Toolset 3.11
  - WiX Toolset Visual Studio 2017 Extension

Installing WiX is optional, as you can build the rest of the system
without building the MSI installer.  Just build the "PinballY Admin
Mode" project individually.  That will build the main PinballY project
and all of its subprojects as dependencies.


4. Chakra Core

This project uses Chakra Core, the Microsoft Javascript engine.  The
necessary headers and pre-built binaries of the .lib and .dll files
are included in the git repository, so you don't have to build Chakra
Core itself to build PinballY.  However, if you wish to update to a
newer Chakra Core, or you want the source around for debugging, you
can build it from source, which is quite simple to do.  Instructions
are in Notes\ChakraCore.txt.


5. Install other needed Windows Platform SDK versions (if necessary)

Visual Studio normally installs the current Windows Platform SDK
automatically as part of the development environment setup.  However,
each Project configuration calls for a SPECIFIC Platform SDK version,
so the one that VS installs might not match what the PinballY project
settings require.  If you get any errors about missing Platform SDK
headers when you try to build, you can get the required versions here:

  https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/

It's okay to have several different SDK versions installed on your
machine, so installing another version won't affect your existing SDK
installs or other projects.

To figure out which SDK version is needed for a given Visual Studio
project, open the solution (.sln) file in Visual Studio, then
right-click on the project in the Solution Explorer panel and select
Properties.  On the "General" page, look for the line saying "Windows
SDK Version".  That will tell you the specific version that project
requires.  You can either install that version from the Microsoft site
above, OR you can try changing the "Windows SDK Version" in the
project properties to match a version you already have installed.  In
most cases, PinballY should be perfectly happy to work with newer SDK
versions, since Microsoft goes to pretty heroic lengths to keep their
SDKs backwards-compatible.  But they sometimes do make incompatible
changes, so if you get compiler errors after changing the SDK version
setting in the project properties, try changing back it back in the
properties, and install the old SDK from the link above.
